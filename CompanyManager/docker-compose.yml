version: '3.8'

services:
  # SQL Server Database
  sql:
    container_name: companymanager-sql
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Senha@1234A!
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - sql_data:/var/opt/mssql
    networks:
      - companymanager-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Senha@1234A! -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Backend API
  api:
    container_name: companymanager-api
    build:
      context: .
      dockerfile: CompanyManager.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=sql;Database=CompanyManager;User Id=sa;Password=Senha@1234A!;TrustServerCertificate=true;Encrypt=false;MultipleActiveResultSets=true;Connection Timeout=30
    ports:
      - "5000:80"
    depends_on:
      sql:
        condition: service_healthy
    networks:
      - companymanager-network
    restart: unless-stopped

  # Frontend React
  frontend:
    container_name: companymanager-frontend
    build:
      context: ../CompanyManager.Frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - companymanager-network
    restart: unless-stopped

  # Adminer para gerenciar o banco
  adminer:
    container_name: companymanager-adminer
    image: adminer:latest
    ports:
      - "8080:8080"
    depends_on:
      - sql
    networks:
      - companymanager-network
    restart: unless-stopped

volumes:
  sql_data:

networks:
  companymanager-network:
    driver: bridge
